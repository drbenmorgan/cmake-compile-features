name: CI

on: [pull_request]

jobs:
  cvmfs-centos7:
    # Run on latest GitHub Hosted Linux so we have Docker
    runs-on: [ubuntu-latest]
    steps:
      # Install and start CVMFS, possible place for action-ization ('setup-cvmfs')
      - name: Install and Start CVMFS
        run: |
          sudo apt-get install lsb-release
          wget https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest_all.deb
          sudo dpkg -i cvmfs-release-latest_all.deb
          rm -f cvmfs-release-latest_all.deb
          sudo apt-get update
          sudo apt-get install cvmfs cvmfs-config-default
          sudo cvmfs_config setup
          echo  "CVMFS_REPOSITORIES=sft.cern.ch" | sudo tee -a  /etc/cvmfs/default.local > /dev/null
          echo  "CVMFS_HTTP_PROXY=DIRECT"  | sudo tee -a  /etc/cvmfs/default.local > /dev/null
          sudo service autofs restart
          sudo cvmfs_config probe
      # Like Azure, if we have to run steps mixed between VM and Container, Container must be manually managed
      - name: Pull Docker Image
        run: docker pull benmorgan/lcg-builder
      - name: Create Docker Container
        run: docker run -itd --name builder -v $GITHUB_WORKSPACE:/workspace -v /cvmfs:/cvmfs -w /workspace benmorgan/lcg-builder
      # Now the actual builds...
      - uses: actions/checkout@v2
      # Run each config in series just to check that things work
      # Also a little faster as we don't have to install CVMFS/start Docker for each one
      - name: Build CentOS/gcc4.8
        if: always()
        env:
          BUILD_DIR: build-gcc4.8
        run: |
          docker exec builder bash -c "mkdir $BUILD_DIR"
          docker exec builder bash -c ". /cvmfs/sft.cern.ch/lcg/views/LCG_96b/x86_64-centos7-gcc8-opt/setup.sh && cd $BUILD_DIR && CC=/usr/bin/gcc CXX=/usr/bin/g++ cmake .. && cmake --build ."
      - name: Build CentOS/gcc8
        if: always()
        env:
          BUILD_DIR: build-gcc8
        run: |
          docker exec builder bash -c "mkdir $BUILD_DIR"
          docker exec builder bash -c ". /cvmfs/sft.cern.ch/lcg/views/LCG_96b/x86_64-centos7-gcc8-opt/setup.sh && cd $BUILD_DIR && cmake .. && cmake --build ."

  ubuntu:
    strategy:
      fail-fast: false
      matrix:
        # As the matrix is sparse, write explicitly rather than x-product and excludes
        # Limit compilers AFAP to packages installable directly (no ppa)
        include:
          - { os: ubuntu-18.04, cc: gcc-7, cxx: g++-7 }
          - { os: ubuntu-18.04, cc: gcc-8, cxx: g++-8 }
          - { os: ubuntu-18.04, cc: clang-8, cxx: clang++-8 }
          - { os: ubuntu-20.04, cc: clang-9, cxx: clang++-9 }
          - { os: ubuntu-20.04, cc: gcc-9, cxx: g++-9 }
          - { os: ubuntu-20.04, cc: gcc-10, cxx: g++-10 }
          - { os: ubuntu-20.04, cc: clang-10, cxx: clang++-10 }
    runs-on: ${{ matrix.os }}
    env:
      CC: /usr/bin/${{ matrix.cc }}
      CXX: /usr/bin/${{ matrix.cxx }}
    steps:
      - uses: actions/checkout@v2
      - name: Configure
        run: |
          mkdir build && cd build
          cmake ..
      - name: Build
        run: |
          cd build
          cmake --build .

  macOsAndWindows:
    strategy:
      fail-fast: false
      matrix:
        # Add macOS-11.0 once public pools are available
        os: [macos-10.15, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Configure
        run: |
          cmake -S. -B ./build
      - name: Build
        run: |
          cmake --build ./build --config RelWithDebInfo

