name: CI

on: [push]

jobs:
  cvmfs-centos7:
    # Run on GitHub Hosted Linux so we have Docker
    runs-on: [ubuntu-latest]
    steps:
      # Install and start CVMFS, possible place for action-ization ('setup-cvmfs') 
      - name: Start CVMFS
        run: | 
          sudo apt-get install lsb-release
          wget https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest_all.deb
          sudo dpkg -i cvmfs-release-latest_all.deb
          rm -f cvmfs-release-latest_all.deb
          sudo apt-get update
          sudo apt-get install cvmfs cvmfs-config-default
          sudo cvmfs_config setup
          echo  "CVMFS_REPOSITORIES=sft.cern.ch" | sudo tee -a  /etc/cvmfs/default.local > /dev/null
          echo  "CVMFS_HTTP_PROXY=DIRECT"  | sudo tee -a  /etc/cvmfs/default.local > /dev/null
          sudo service autofs restart
          sudo cvmfs_config probe
      # Like Azure, if we have to run steps mixed between VM and Container, Container must be manually managed
      - name: Pull Docker Imake
        run: docker pull benmorgan/lcg-builder
      - name: Create Docker Container
        run: docker run -itd --name builder -v $GITHUB_WORKSPACE:/workspace -v /cvmfs:/cvmfs -w /workspace benmorgan/lcg-builder
      # Now the actual build...
      - uses: actions/checkout@v2
      # Again, a possible place for action-ization or use of variables
      - name: Docker Exec Test
        run: |
          docker exec builder bash -c 'ls -larth && whoami'
          docker exec builder bash -c 'mkdir build'
          docker exec builder bash -c '. /cvmfs/sft.cern.ch/lcg/views/LCG_96bpython3/x86_64-centos7-gcc8-opt/setup.sh && cd build && cmake .. && cmake --build .'
        
  ubuntu-1804:
    strategy:
      fail-fast: true
      matrix:
        compiler: 
        - {cc: gcc-7, cxx: g++-7}
        - {cc: gcc-8, cxx: g++-8}
        - {cc: gcc-9, cxx: g++-9}
        - {cc: clang-6.0, cxx: clang++-6.0}
        - {cc: clang-8, cxx: clang++-8}
        - {cc: clang-9, cxx: clang++-9}          
    runs-on: [ubuntu-18.04]
    env:
      CC: /usr/bin/${{ matrix.compiler.cc }}
      CXX: /usr/bin/${{ matrix.compiler.cxx }}
    steps:
      - uses: actions/checkout@v2
      - name: Configure
        run: |
          mkdir build && cd build
          cmake ..
      - name: Build
        run: |
          cd build
          cmake --build .
          
  ubuntu-1804-gcc8:
    runs-on: [ubuntu-18.04]
    steps:
      - uses: actions/checkout@v2
      - name: Configure
        run: |
          mkdir build && cd build
          cmake ..
      - name: Build
        run: |
          cd build
          cmake --build .

  macOS-Catalina:
    runs-on: [macos-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Configure
        run: |
          mkdir build && cd build
          cmake ..
      - name: Build
        run: |
          cd build
          cmake --build .
          
  windows-2019:
    runs-on: [windows-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Configure
        run: |
          mkdir build && cd build
          cmake ..
      - name: Build
        run: |
          cd build
          cmake --build . --config RelWithDebInfo
