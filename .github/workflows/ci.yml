name: CI

on: [pull_request]

jobs:
  CentOS7-CVMFS:
    # Run on latest GitHub Hosted Linux so we have Docker
    runs-on: [ubuntu-latest]
    steps:
      # Setup CVMFS
      - uses: cvmfs-contrib/github-action-cvmfs@v2
      # Like Azure, if we have to run steps mixed between VM and Container, Container must be manually managed
      - name: Pull Docker Image
        run: docker pull benmorgan/lcg-builder
      - name: Create Docker Container
        run: docker run -itd --name builder -v $GITHUB_WORKSPACE:/workspace -v /cvmfs:/cvmfs:shared -w /workspace benmorgan/lcg-builder
      # Now the actual builds...
      - uses: actions/checkout@v2
      # Run each config in series just to check that things work
      # Also a little faster as we don't have to install CVMFS/start Docker for each one
      - name: Build CentOS/gcc4.8
        if: always()
        env:
          BUILD_DIR: build-gcc4.8
        run: |
          docker exec builder bash -c ". /cvmfs/sft.cern.ch/lcg/views/LCG_96b/x86_64-centos7-gcc8-opt/setup.sh && CC=/usr/bin/gcc CXX=/usr/bin/g++ cmake -S. -B./${BUILD_DIR} && cmake --build ./${BUILD_DIR}"
      - name: Build CentOS/gcc8
        if: always()
        env:
          BUILD_DIR: build-gcc8
        run: |
          docker exec builder bash -c ". /cvmfs/sft.cern.ch/lcg/views/LCG_96b/x86_64-centos7-gcc8-opt/setup.sh && cmake -S. -B./${BUILD_DIR} && cmake --build ./${BUILD_DIR} && cd ./${BUILD_DIR} && ctest -VV"

  UbuntuMacWindows:
    strategy:
      fail-fast: false
      matrix:
        # As the matrix is sparse, write explicitly rather than x-product and excludes
        # Limit compilers AFAP to packages installable directly (no ppa)
        include:
          - { os: ubuntu-18.04, cc: gcc-7, cxx: g++-7 }
          - { os: ubuntu-18.04, cc: gcc-8, cxx: g++-8 }
          - { os: ubuntu-18.04, cc: clang-8, cxx: clang++-8 }
          - { os: ubuntu-20.04, cc: clang-9, cxx: clang++-9 }
          - { os: ubuntu-20.04, cc: gcc-9, cxx: g++-9 }
          - { os: ubuntu-20.04, cc: gcc-10, cxx: g++-10 }
          - { os: ubuntu-20.04, cc: clang-10, cxx: clang++-10 }
          - { os: macos-10.15 }
          - { os: windows-latest }
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup build environment
        # Set CC/CXX only if they exist
        # See https://github.community/t/possible-to-use-conditional-in-the-env-section-of-a-job/135170/2
        # for why this can be done in env: above
        shell: bash
        run: |
          [[ ! -z "${{ matrix.cc }}" ]] && echo "CC=${{ matrix.cc }}" >> $GITHUB_ENV || echo "No CC to set"
          [[ ! -z "${{ matrix.cxx }}" ]] && echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV || echo "No CXX to set"
      - name: Configure
        run: |
          cmake -S. -B ./build
      - name: Build
        run: |
          cmake --build ./build --config RelWithDebInfo
      - name: Test
        run: |
          cd ./build && ctest -VV

